con
  INPUT_BUFFER_SIZE = 256

var
  LONG input_position
  BYTE input_buffer[INPUT_BUFFER_SIZE]

pub reset_input_buffer()
    input_position := 0
    bytefill(@input_buffer, 0, INPUT_BUFFER_SIZE)


pub get_arg(buf) : i | c
  i := 0
  repeat while input_position < INPUT_BUFFER_SIZE
    c := input_buffer[input_position]
    if c <> " " and c <> 0
      ' This bit me in the ass. Using normal
      ' assignment would result in LONGs being
      ' written. Only through the BYTE redirection
      ' this works. Which makes sense.
      BYTE[buf][i++] := c
      ++input_position
    else
      quit
  ' same here... doh!
  BYTE[buf][i] := 0 ' terminating 0
  ' place input_position on the next agument
  skip_space()
  return i


pub skip_space() : result
  ' skip spaces in the input buffer and return the amount
  result := 0
  repeat while result + input_position < INPUT_BUFFER_SIZE and input_buffer[result + input_position] == " "
    ++result
  input_position += result
  return result


pub skip_not_space_or_null() : result | c
  ' skip anything that's not a space/0
  result := 0
  repeat
    if result + input_position >= INPUT_BUFFER_SIZE
      quit
    c := input_buffer[result + input_position]
    if c <> " " and c <> 0
      ++result
    else
      quit

  input_position += result
  return result

pub number_of_args(): result
  result := 0
  ' we insist on a space
  ' between the command an the first argument
  input_position := 1
  if skip_space() > 0
    repeat until skip_not_space_or_null() == 0
      result++
      input_position := (input_position + 1) +// INPUT_BUFFER_SIZE
  ' reset the input_position here for possible
  ' get_arg calls.
  input_position := 2
  return result

pub read_input(serial_rxcheck, serial_tx): result | char
  result := 0
  repeat
    char := serial_rxcheck()
    if char <> -1
      if char <> 13  ' CR
        serial_tx(char)
        input_buffer[input_position] := char
        input_position := (input_position + 1) +// INPUT_BUFFER_SIZE
      else
        ' nl
        serial_tx(13)
        serial_tx(10)
        input_buffer[input_position] := 0
        input_position := (input_position + 1) +// INPUT_BUFFER_SIZE
        return input_buffer[0]
