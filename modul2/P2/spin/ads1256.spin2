con
  ADC_CLKIN = 7_680 ' Quartz KHz
  ADC_SPEED = ADC_CLKIN / 4 ' SPI speed, chosen according to datasheet p19
  ADC_CPHA = 1

  #0, STATUS, MUX, ADCON, DRATE, IO, OFC0, OFC1, OFC2, FSC0, FSC1, FSC2

  T6 = 7 ' us 50 * 1/7.68Mhz -> ~6.5 us
  T11 = 3 ' us,  24 * T_CLKIN which is the period of the master clock signal.
          ' It might be possible to remove this as other code
          ' probably already eats the time up
var
  byte cs_pin, drdy_pin, pdwn_pin
obj
  spi : "deets_spi"

pub start(sdipin, sdopin, sckpin, cs_pin_, drdy_pin_, pdwn_pin_) : result
  cs_pin := cs_pin_
  drdy_pin := drdy_pin_
  pdwn_pin := pdwn_pin_

  result := spi.start(sdipin, sdopin, sckpin, ADC_SPEED, ADC_CPHA, 0)

  if result
    pinhigh(cs_pin)
    pinlow(pdwn_pin)
    waitus(100)
    pinhigh(pdwn_pin)
    reset()
  return result

pub rreg(first_reg, count): result | h
  h := (($10 | first_reg) << 8) | count - 1
  pinlow(cs_pin)
  waitus(50) ' cargo cult?
  spi.shiftout(spi.MSBFIRST, h, 16)
  waitus(T6)
  result := spi.shiftin(spi.MSBFIRST, 8 * count)
  waitus(T11)
  pinhigh(cs_pin)
  return result

pub read_single_sided(channel): result | mux_value
  mux_value := (channel << 4) | (1 << 3) ' AIN-channel and AINCOM
  wreg(MUX, mux_value)
  sync()
  wakeup()
  repeat 1
    drdycycle()
  result := rdata()

pub wreg(register, value) | h
  h := (%0101_0000 | register) << 8 | 0 ' count -1
  pinlow(cs_pin)
  ' this was from the arduino-code: it seems
  ' we need to really wait until drdy is 0 to
  ' write to the registers.
  repeat until pinread(drdy_pin) == 0
  spi.shiftout(spi.MSBFIRST, h, 16)
  spi.shiftout(spi.MSBFIRST, value, 8)
  waitus(T11)
  pinhigh(cs_pin)

pub drdy() : result
  return pinread(drdy_pin)

pub drdycycle()
  repeat until pinread(drdy_pin) > 0
  repeat until pinread(drdy_pin) == 0

pub sync()
  cmd($FC)
  waitus(T11)

pub wakeup()
  cmd($FF)
  waitus(T11)

pub rdata(): result
  ' this assumes we waited for DRDY 0!
  pinlow(cs_pin)
  spi.shiftout(spi.MSBFIRST, $01, 8)
  waitus(T6)
  result := spi.shiftin(spi.MSBFIRST, 3 * 8)
  pinhigh(cs_pin)
  return result

pub timediff_for_datarate(d): result
  case d
    %00000011: return clkfreq * 2 / 5  ' 2.5SPS
    %00010011: return clkfreq / 5
    %00100011: return clkfreq / 10
    %00110011: return clkfreq / 15
    %01000011: return clkfreq / 25
    %01010011: return clkfreq / 30
    %01100011: return clkfreq / 50
    %01110010: return clkfreq / 60
    %10000010: return clkfreq / 100
    %10010010: return clkfreq / 500
    %10100001: return clkfreq / 1000
    %10110000: return clkfreq / 2000
    %11000000: return clkfreq / 3750
    %11010000: return clkfreq / 7500
    %11100000: return clkfreq / 15000
    %11110000: return clkfreq / 30000
  return 0

pri reset()
  cmd($FE)
  waitus(100)

pri cmd(value)
  pinlow(cs_pin)
  spi.shiftout(spi.MSBFIRST, value, 8)
  pinhigh(cs_pin)