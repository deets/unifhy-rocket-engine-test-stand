con
  _clkfreq = 300_000_000

  LF = $a
  CR = $d
  DOLLAR = $24
  ASTERISK = $2a

  ADC_BUFFER_SIZE = 100
  INSTRUCTION_BUFFER_SIZE = 8

  SERIAL_BUFFER_SIZE = 1024

  DATAGRAM_SIZE = 8 ' two longs, timestamp:mux:value
  BUFFER_CAPACITY = 16_000_000 / DATAGRAM_SIZE

var
  BYTE instruction_buffer[INSTRUCTION_BUFFER_SIZE]
  ' The following three items are the ringbuffer
  ' for the buffered reader.
  LONG read
  LONG write
  LONG buffer[ADC_BUFFER_SIZE * 2]

  BYTE serial_input_buffer[6]  ' We always start with $RQADS
  BYTE payload[SERIAL_BUFFER_SIZE - 6]
  BYTE serial_input_buffer_pos
  BYTE serial_output_preamble[6] ' Again $RQADS
  BYTE serial_output_buffer[SERIAL_BUFFER_SIZE]
  WORD serial_output_buffer_pos
  BYTE thinning
  BYTE mux_buffer[8]
  BYTE mux_buffer_length
  ' Some statistical values from the last CDAC run
  LONG total_samples, avg_timediff, max_timediff, max_sample

obj
  conf: "configuration"
  adc: "buffered_ads1256"
  serial: "jm_fullduplexserial"
  sdwriter: "sdwriter"
  util: "util"
  rb: "hyper_ringbuffer"

pub main() | c, correct, success
  bytemove(@serial_output_preamble, string("$RQADS"), 6)

  rb.init(DATAGRAM_SIZE, BUFFER_CAPACITY, 0)

  serial_output_buffer_pos := 0
  thinning := 255
  serial.start(conf.RX0, conf.TX0, %0000, conf.BR_SERIAL)
  read := ADC_BUFFER_SIZE
  adc.start(conf.ADC_SDI, conf.ADC_SDO, conf.ADC_CLK, conf.ADC_CS, conf.ADC_DRDY, conf.ADC_PDWN, @read)
  sdwriter.start(@rb.store, @rb.available, @rb.fetch)
  serial_input_buffer_pos := 0

  repeat
    if serial.available() > 0
      repeat serial.available()
        c := serial.rx()
        serial_input_buffer[serial_input_buffer_pos] := c
        serial_input_buffer_pos := (serial_input_buffer_pos + 1) +// SERIAL_BUFFER_SIZE
        serial_input_buffer[serial_input_buffer_pos] := 0 ' terminate

        if c == LF
          if rq_datagram()
            correct := rq_process()
            ifnot correct
              debug(zstr(string("incorrect command")))
            ' Send any lingering data
            rq_finalize()

          reset_buffer()

pri reset_buffer()
  serial_input_buffer_pos := 0

pri rq_datagram() : result | p, wire_checksum, local_checksum
  {{
  A correct datagram looks like this:

  $RQADS<instructions>*CS\r\n

  where CS is a 1-byte checksum built by XOR'ing together
  all characters between $ and *, and then represented
  as hexadecimal character.

  None of the bytes in <instructions> is allowed to be \r or \n
  }}
  result := false
  if serial_input_buffer_pos >= 11 ' $RQADS*AB\r\n is 11 characters long
    p := serial_input_buffer_pos
    if serial_input_buffer[0] == DOLLAR and serial_input_buffer[p - 1] == LF and serial_input_buffer[p - 2] == CR and serial_input_buffer[p - 5] == ASTERISK
      wire_checksum := util.decode_hex_byte(@serial_input_buffer[p - 4])
      local_checksum := util.compute_checksum(@serial_input_buffer[1], @serial_input_buffer[p - 6])
      result := wire_checksum == local_checksum
  return result

pri rq_process() : result | payload_length
  payload_length := serial_input_buffer_pos - 6 - 5 ' remove $RQADS and *XX\r\n
  case payload[0]
    "P": result := rq_ping(payload_length)
    "R": result := rq_rate(payload_length)
    "T": result := rq_thinning(payload_length)
    "C": result := rq_cdac(payload_length)
    "S": result := rq_stats(payload_length)
    "L": result := rq_list(payload_length)
    "F": result := rq_stream_file(payload_length)

pri rq_cdac(payload_length) : result | payload_offset, buffer_offset
  ' A cdac command looks like
  ' C<N>:XY{N}
  ' where N is the number of mux-instructions
  ' that must be in 1..8 and then N mux-instructions
  if payload_length < 5 ' RN:XY
    return FALSE
  payload_offset := 1
  buffer_offset := 0
  mux_buffer_length := util.decode_nibble(payload[payload_offset])
  if mux_buffer_length < 0 and mux_buffer_length > 8
    return FALSE
  payload_offset += 1 ' skip N
  ' we must have :XY worth mux_buffer_length
  if payload_offset + 3 * mux_buffer_length > payload_length
    return FALSE

  repeat buffer_offset from 0 to mux_buffer_length - 1
    payload_offset += 1 ' skip :
    mux_buffer[buffer_offset] := util.decode_hex_byte(@payload + payload_offset)
    payload_offset += 2 ' skip XY

  do_cdac()
  return TRUE

pri do_cdac() | mux, timestamp, value, thinning_count, last_timestamp, timediff
  thinning_count := 0
  serial_output_buffer_pos := 0
  last_timestamp := 0
  max_timediff := 0
  total_samples := 0
  max_sample := 0
  avg_timediff := adc.timediff_for_datarate()
  'debug(udec(avg_timediff))

  sdwriter.begin()
  adc.start_continuous_read(@mux_buffer, mux_buffer_length)
  repeat
    ' we always want to send all mux values,
    ' thinning applies to full sets of values
    repeat mux_buffer_length
      ' any data on serial stops cdac
      repeat until adc.available() > 0
        if serial.available() > 0
          adc.stop_continuous_read()
          ' TODO: consume the rest of the buffer before
          ' closing down
          sdwriter.finish(total_samples, avg_timediff, max_timediff, max_sample)
          return
      timestamp, mux, value := adc.read_continuous()
      sdwriter.feed(timestamp, mux, value)
      if thinning == 0 or thinning_count == 0
        thinning_count := thinning
        rq_send_str(string("C"))
        rq_send_hex_long(timestamp)
        rq_send_hex_byte(mux)
        rq_send_hex_long(value)
        rq_finalize()

      thinning_count -= 1

      total_samples += 1
      if total_samples > 1000
        if last_timestamp <> 0
          timediff := util.timediff(last_timestamp, timestamp)
          if max_timediff < timediff
            max_timediff #>= timediff
            max_sample := total_samples
          avg_timediff := (avg_timediff + timediff) >> 1
      last_timestamp := timestamp

pri rq_rate(payload_length) : result | rate
  if payload_length <> 4 ' R:XY
    return FALSE
  if payload[1] <> ":"
    return FALSE
  rate := util.decode_hex_byte(@payload + 2) ' read the hex number directly after R:
  adc.wreg(adc.RDRATE, rate)
  rq_send_str(string("R"))
  return TRUE

pri rq_stream_file(payload_length) : result | file_index, file_size
  'debug("rq_stream_file:", udec(payload_length))
  if payload_length <> 5 ' R:XXX
    return FALSE
  if payload[1] <> ":"
    return FALSE
  file_index := util.decode_hex_nibbles(@payload + 2, 3)
  'debug("rq_stream_file:", udec(file_index))
  file_size := sdwriter.prepare_to_stream(file_index)
  rq_send_str(string("F"))
  rq_send_hex_long(file_size)
  rq_finalize()
  if file_size > 0
    repeat
      file_size := sdwriter.stream_buffer(@serial_output_buffer, SERIAL_BUFFER_SIZE)
      'debug("rq_stream_file:", udec(file_size))
      if file_size == 0
        quit
      send_buffer(file_size)
  'debug("rq_stream_file:end")
  reset_buffer()
  return TRUE

pri send_buffer(file_size) | i
  repeat i from 0 to file_size - 1
    serial.tx(serial_output_buffer[i])

pri rq_list(payload_length) : result | file_index, file_size
  ' We send the indices of
  ' matching files in hex 3 form
  ' until we notifiy the client
  ' with XXX
  if payload_length <> 1
    return FALSE
  file_index, file_size := sdwriter.file_listing_start()
  repeat until file_index == sdwriter.FILE_LIST_END
    'debug("rq_list:", uhex(file_index), udec(file_size))
    util.encode_hex_nibbles(@serial_output_buffer + serial_output_buffer_pos, file_index, 3)
    serial_output_buffer_pos += 3
    rq_send_str(string(":"))
    serial_output_buffer_pos += util.encode_hex_long(@serial_output_buffer + serial_output_buffer_pos, file_size)
    rq_finalize()
    file_index, file_size := sdwriter.file_listing_next()

  rq_send_str(string("XXX"))
  return TRUE

pri rq_thinning(payload_length) : result | rate
  if payload_length <> 4 ' T:XY
    return FALSE
  if payload[1] <> ":"
    return FALSE
  thinning := util.decode_hex_byte(@payload + 2) ' read the hex number directly after R:
  rq_send_str(string("T"))
  return TRUE

pri rq_ping(payload_length) : result
  if payload_length <> 1
    return FALSE
  rq_send_str(string("P"))
  return TRUE

pri rq_stats(payload_length) : result
  'debug("rq_stats:", udec(total_samples), udec(avg_timediff), udec(max_timediff), udec(max_sample))
  if payload_length <> 1
    return FALSE
  rq_send_str(string("X"))
  rq_send_hex_long(total_samples)
  rq_send_hex_long(avg_timediff)
  rq_send_hex_long(max_timediff)
  rq_send_hex_long(max_sample)
  return TRUE

pri rq_finalize() | checksum, i
  if serial_output_buffer_pos == 0
    return

  checksum := 0
  repeat i from 1 to serial_output_buffer_pos + 5 ' the RQADS is included in the checksum!
    checksum ^= serial_output_preamble[i]
  serial_output_buffer[serial_output_buffer_pos] := ASTERISK
  serial_output_buffer[serial_output_buffer_pos + 1] := util.encode_nibble(checksum >> 4)
  serial_output_buffer[serial_output_buffer_pos + 2] := util.encode_nibble(checksum & $f)
  serial_output_buffer[serial_output_buffer_pos + 3] := 13 ' \r
  serial_output_buffer[serial_output_buffer_pos + 4] := 10 ' \n
  serial.substr(@serial_output_preamble, 6 + 5 + serial_output_buffer_pos)
  serial_output_buffer_pos := 0

pri rq_send_str(str_addr) | l
  l := strsize(str_addr)
  if serial_input_buffer_pos + l + 5 > SERIAL_BUFFER_SIZE
    debug(zstr(string("serial output buffer overflow")))
  bytemove(@serial_output_buffer + serial_output_buffer_pos, str_addr, l)
  serial_output_buffer_pos += l

pri rq_send_hex_long(value) | shift, h
  rq_send_str(string(":"))
  serial_output_buffer_pos += util.encode_hex_long(@serial_output_buffer + serial_output_buffer_pos, value)

pri rq_send_hex_byte(value) | shift, h
  rq_send_str(string(":"))
  serial_output_buffer_pos += util.encode_hex_byte(@serial_output_buffer + serial_output_buffer_pos, value)