con
  ' mirror the ones of the underlying object
  #0, RSTATUS, RMUX, RADCON, RDRATE, RIO, ROFC0, ROFC1, ROFC2, RFSC0, RFSC1, RFSC2
  #100, IWREG, IRREG, IRSSC, ICDAC
  #1, SR_2_5, SR_5, SR_10, SR_15, SR_25, SR_30, SR_50, SR_60, SR_100, SR_500, SR_1000, SR_2000, SR_3750, SR_7500, SR_15000, SR_30000
var
  long cog
  long stack[128]
  long instruction
  long a, b
  long output_buffer_address
  long output_buffer_size
  long last_value, biggest_diff
obj
  adc : "ads1256"

pub start(sdi, sdo, clk, cs, drdy, pdwn, output_buffer_address_) : result
  ' The protocol for the output_buffer_address is as follows:
  '
  ' It points to a buffer of longs. The first two longs are
  ' the read and write position in into the following ring-buffer
  ' elements. On start we expect the read position to hold the
  ' size of the ring-buffer, but in double-longs! This
  ' is due to each entry being a (timestamp, mux:value)
  cog := cogspin(NEWCOG, main(sdi, sdo, clk, cs, drdy, pdwn, output_buffer_address_, cogid()), @stack)
  waitatn()
  return cog + 1

pub wreg(register, value)
  instruction := IWREG
  a := register
  b := value
  cogatn(1 << cog)
  waitatn()

pub rreg(first_reg, count): result
  instruction := IRREG
  a := first_reg
  b := count
  cogatn(1 << cog)
  waitatn()
  return a

pub read_single_sided(channel): result
  instruction := IRSSC
  a := channel
  cogatn(1 << cog)
  waitatn()
  return a

pub timediff_for_datarate(): result | d
  d := rreg(RDRATE, 1)
  return adc.timediff_for_datarate(d)

pub start_continuous_read(mux_buffer_address, mux_buffer_size)
  ' The contents of mux_buffer_address
  ' is expected to stay constant during the
  ' continuous data acquisition, as it contains
  ' the mux register values that are being issued
  instruction := ICDAC
  a := mux_buffer_address
  b := mux_buffer_size
  cogatn(1 << cog)

pub read_continuous() : timestamp, mux, value | rpos
  repeat until available() > 0
  rpos := LONG[output_buffer_address][0]
  ' +2 to skip read/write, << 1 adjusts for our 2-long entry size
  timestamp := LONG[output_buffer_address][2 + (rpos << 1)]
  value := LONG[output_buffer_address][2 + (rpos << 1) + 1]
  mux := value >> 24
  value &= $ffffff
  LONG[output_buffer_address][0] := (rpos + 1) +// output_buffer_size
  return timestamp, mux, value

pub stop_continuous_read()
  cogatn(1 << cog)
  debug("biggest_diff:", udec(biggest_diff))
  last_value := 0
  biggest_diff := 0

pub set_sample_rate(sample_rate) | v
  case sample_rate
    SR_2_5:
      v := %00000011
    SR_5:
      v := %00010011
    SR_10:
      v := %00100011
    SR_15:
      v := %00110011
    SR_25:
      v := %01000011
    SR_30:
      v := %01010011
    SR_50:
      v := %01100011
    SR_60:
      v := %01110010
    SR_100:
      v := %10000010
    SR_500:
      v := %10010010
    SR_1000:
      v := %10100001
    SR_2000:
      v := %10110000
    SR_3750:
      v := %11000000
    SR_7500:
      v := %11010000
    SR_15000:
      v := %11100000
    SR_30000:
      v := %11110000

  wreg(RDRATE, v)

pub available(): result
  ' (write + size - read) % size
  result := (LONG[output_buffer_address][1] + output_buffer_size - LONG[output_buffer_address][0]) +// output_buffer_size
  return result

pri main(sdi, sdo, clk, cs, drdy, pdwn, output_buffer_address_, caller_cog)
  output_buffer_address := output_buffer_address_
  output_buffer_size := LONG[output_buffer_address]

  last_value := 0
  biggest_diff := 0

  adc.start(sdi, sdo, clk, cs, drdy, pdwn)
  repeat
    cogatn(1 << caller_cog)
    waitatn()

    case instruction
       IWREG:
        adc.wreg(a, b)
       IRREG:
        a := adc.rreg(a, b)
       IRSSC:
        a := adc.read_single_sided(a)
       ICDAC:
         cdac(a, b)

pri cdac(mux_buffer_address, mux_buffer_size) | last_mux, buf_pos, now, value
    LONG[output_buffer_address][0] := 0 ' read pos
    LONG[output_buffer_address][1] := 0 ' write pos
    last_mux := BYTE[mux_buffer_address][0]
    if mux_buffer_size == 1
      ' special case: we do not really need to
      ' perform the protocol laid out in P19 of
      ' the datasheet. Instead just read following
      ' drdy
      adc.wreg(adc.MUX, last_mux)
      adc.sync()
      adc.wakeup()
      repeat until pollatn() == -1
        adc.drdycycle()
        adc.wreg(adc.MUX, last_mux)
        adc.sync()
        adc.wakeup()
        now := getct()
        value := adc.rdata()
        store(now, last_mux, value)
        stats(value)
    else
      buf_pos := 1
      adc.wreg(adc.MUX, last_mux)
      adc.sync()
      adc.wakeup()
      repeat until pollatn() == -1
        adc.drdycycle()
        now := getct()
        ' we first instruct the adc
        ' to change the input, as this allows
        ' it to settle and sample while
        ' the last read value is still retained
        adc.wreg(adc.MUX, BYTE[mux_buffer_address][buf_pos])
        adc.sync()
        adc.wakeup()
        ' only now we read the data + put it out
        value := adc.rdata()
        store(now, last_mux, value)
        last_mux := BYTE[mux_buffer_address][buf_pos]
        buf_pos := (buf_pos + 1) +// mux_buffer_size
        stats(value)

pri store(timestamp, mux, value) | wpos
  wpos := LONG[output_buffer_address][1]
  ' We never allow for 0 to be a timestamp. This
  ' way we can use it as sentinel value.
  if timestamp == 0
    timestamp := 1
  ' the +2 skips read/write, the << 1 takes care
  ' of the two-long data entry we are dealing with
  LONG[output_buffer_address][2 + wpos << 1] := timestamp
  LONG[output_buffer_address][2 + (wpos << 1) + 1] := (mux << 24 | value)
  wpos := (wpos + 1) +// output_buffer_size
  LONG[output_buffer_address][1] := wpos

pri stats(value) | diff
  value := value signx 23
  if last_value <> 0
    diff := abs (value - last_value)
    biggest_diff #>=diff
  last_value := value
