con
  #0, SYSTEM_IDLE, SYSTEM_CAPTURING, SYSTEM_ERROR
  #0, SD_OK, SD_WRITING, SD_ERROR

var
  byte system_status, sd_status
  long count, capacity
obj
  conf: "configuration"
  util: "util"

' The following methods are supposed to be invoked
' from the same core
pub setup(capacity_)
  capacity := capacity_
  system_status := SYSTEM_IDLE
  sd_status := SD_OK
  pinstart(conf.CAPTURE_SWITCH, P_NORMAL | P_LOW_15K, 0, 0)
  setup_status_pin()

pub sample_written()
  count += 1

pub set_system_idle()
  set_system_state(SYSTEM_IDLE)

pub set_system_capturing()
  set_system_state(SYSTEM_CAPTURING)

pub set_system_error()
  set_system_state(SYSTEM_ERROR)

pub should_capture() : result
  if system_status == SYSTEM_IDLE
    return pin_asserted()
  DEBUG(UDEC(count), UDEC(capacity))
  return pin_asserted() and count < capacity

' The SD-card status can be invoked from a different cog.
pub set_sd_state(state)
  sd_status := state
  setup_sd_pin()

pri pin_asserted() : result
  ' Active High
  return pinread(conf.CAPTURE_SWITCH)

pri set_system_state(state)
  if state == SYSTEM_IDLE and system_status <> SYSTEM_IDLE
    ' we first have to wait until the user
    ' flips back the switch before we go into
    ' IDLE
    repeat until not pin_asserted()
    ' debunce the switch
    waitms(100)
  system_status := state
  setup_status_pin()
  ' reset count when we switch to capturing mode
  if state == SYSTEM_CAPTURING
    count := 0

pri setup_status_pin()
  pinclear(conf.SYSTEM_STATUS_PIN)

  case system_status
    SYSTEM_IDLE: pinlow(conf.SYSTEM_STATUS_PIN)
    SYSTEM_CAPTURING: pinhigh(conf.SYSTEM_STATUS_PIN)
    SYSTEM_ERROR: pinstart(conf.SYSTEM_STATUS_PIN, P_PWM_SAWTOOTH+P_OE, 5000<<16+(clkfreq/10000), 2500)

pri setup_sd_pin()
  pinclear(conf.SD_STATUS_PIN)

  case sd_status
    SD_OK: pinlow(conf.SD_STATUS_PIN)
    SD_WRITING: pinhigh(conf.SD_STATUS_PIN)
    SD_ERROR: pinstart(conf.SD_STATUS_PIN, P_PWM_SAWTOOTH+P_OE, 5000<<16+(clkfreq/10000), 2500)
