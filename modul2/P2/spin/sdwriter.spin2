con
  ' P2 Eval Board Assignment
  SD_DO = 58
  SD_DI = 59
  SD_CS = 60
  SD_CLK = 61

  LINE_SIZE = 20 '<8>:<2>:<6>\r\n
  FLUSH_AFTER_BYTES = 512

  FILE_LIST_END = $ffffffff

var
  byte cmd, cog, caller_cog, running
  word file_index
  byte filename[13]
  long stack[2048]
  long entry[2]
  byte line_buffer[LINE_SIZE]
  long write_entry[2]
  long byte_counter
  long enumeration_result, enumeration_size, selected_file_index
  long total_samples, avg_timediff, max_timediff, max_sample

  ' buffer callbacks
  long store, available, fetch
  ' status callback
  long set_sd_state
  ' wuergaround
  long signal
obj
  fat: "FAT32"
  util: "util"
  status: "status"
  conf: "configuration"

pub start(store_, available_, fetch_, set_sd_state_) : result
  store := store_
  available := available_
  fetch := fetch_
  set_sd_state := set_sd_state_
  cog := cogspin(NEWCOG, main(cogid()), @stack)
  waitatn()
  return cog + 1

pri main(caller_cog_) | success
  running := 0
  set_sd_state(status.SD_ERROR)

  caller_cog := caller_cog_
  success := fat.Start(SD_DO, SD_CLK, SD_DI, SD_CS, conf.SD_SPI_SPEED, 0)
  debug(zstr(string("fatenginestart:")))
  debug(udec(success))
  cogatn(1 << caller_cog)

  debug(zstr(string("mount:")))
  success := \fat.mountPartition(0)
  if success > 0
    debug(zstr(string("mounting failed")))
    debug(zstr(success))
  else
    file_index := find_last_file_index() + 1
    debug(zstr(string("file_index")))
    debug(uhex_word(file_index))
    set_sd_state(status.SD_OK)
    running := 1

  mainloop()

pub begin()
  if running > 0
    cmd := "b"
    cogatn(1 << cog)
    waitatn()

pub finish(total_samples_, avg_timediff_, max_timediff_, max_sample_)
  ' we don't need a command, begin has
  ' put cog into a loop that we leave using atn
  if running > 0
    longmove(@total_samples, @total_samples_, 4)
    signal := 0
    cogatn(1 << cog)
    waitatn()
    repeat until signal <> 0
    debug("sdwriter:end")

pub feed(timestamp, mux, value)
  entry[0] := timestamp
  entry[1] := mux << 24 | value & $00ffffff
  store(@entry)

pub file_listing_start(): result
  debug(zstr(string("enumerate_file")))
  if running > 0
    cmd := "l"
    cogatn(1 << cog)
    waitatn()
    return enumeration_result, enumeration_size
  else
    return FILE_LIST_END, 0

pub file_listing_next(): result
  ' signal the sync_cmd_list loop that
  ' it should get the next name
  cogatn(1 << cog)
  waitatn()
  return enumeration_result, enumeration_size

pub prepare_to_stream(selected_file_index_): result
  if running > 0
    cmd := "s"
    selected_file_index := selected_file_index_
    cogatn(1 << cog)
    waitatn()
    return enumeration_size
  return 0

pub stream_buffer(address, size): result
  enumeration_result := address
  enumeration_size := size
  cogatn(1 << cog)
  waitatn()
  return enumeration_result

pri mainloop()
  repeat
    waitatn()
    case cmd
      "b" : sync_cmd_begin()
      "l" : sync_cmd_list()
      "s" : sync_cmd_stream()
    cmd := 0

pri sync_cmd_stream() | index, name, read_bytes
  debug("sync_cmd_stream:", udec(selected_file_index))
  enumeration_size := 0
  repeat
    fat.listEntries("N")
    name := fat.listName()
    if strsize(name) == 0
      quit
    if strsize(name) == 12 and util.startswith(string("RQADS"), name) and !util.endswith(string("~1.DAT"), name)
      index := util.decode_hex_nibbles(name + 5, 3)
      if index == selected_file_index
        enumeration_size := fat.listSize()
        debug("sync_cmd_stream:enumeration_size:", udec(enumeration_size))
        quit

  ' notify the waiting caller
  ' about the actual file size
  cogatn(1 << caller_cog)
  'debug("sync_cmd_stream:after")
  if enumeration_size > 0
    ' as we found a file, we open it and
    ' expect stream_buffer to be called
    fat.openFile(name, "R")
    repeat
      waitatn()
      read_bytes := fat.readData(enumeration_result, enumeration_size)
      'debug("sync_cmd_stream:read_bytes:", udec(read_bytes))
      enumeration_result := read_bytes
      cogatn(1 << caller_cog)
      if read_bytes == 0
        quit
  ' final handshake
  'debug("sync_cmd_stream:final_handshake")
  waitatn()
  enumeration_result := read_bytes
  cogatn(1 << caller_cog)

pri sync_cmd_list() | name
  repeat
    fat.listEntries("N")
    name := fat.listName()
    if strsize(name) == 0
      quit
    if strsize(name) == 12 and util.startswith(string("RQADS"), name) and !util.endswith(string("~1.DAT"), name)
      enumeration_result := util.decode_hex_nibbles(name + 5, 3)
      enumeration_size := fat.listSize()
      cogatn(1 << caller_cog)
      waitatn()

  enumeration_result := FILE_LIST_END
  debug("sync_cmd_list", uhex(enumeration_result))
  cogatn(1 << caller_cog)

pri sync_cmd_begin() | success
  debug(zstr(string("sync_cmd_begin")))
  bytemove(@filename, string("RQADSXXX.DAT"), 12)
  filename[12] := 0
  util.encode_hex_nibbles(@filename + 5, file_index, 3)
  file_index += 1
  debug(zstr(@filename))
  success := fat.newFile(@filename)
  set_sd_state(status.SD_WRITING)
  fat.openFile(@filename, "W")
  'debug("fat.newFile", udec(result))

  ' allow the calling cog to continue
  cogatn(1 << caller_cog)

  byte_counter := 0
  ' until we get signalled by finish
  repeat until pollatn() == -1
    if available()
      write_buffer()
  ' cleanup and signal the end call
  debug("sdwriter:teardown")
  repeat while available()
    write_buffer()
  write_statistics_line()
  fat.flushData()
  fat.closeFile()
  set_sd_state(status.SD_OK)
  ' allow the finish call to continue
  cogatn(1 << caller_cog)
  signal := 1

pri write_buffer()
  byte_counter += write_line()
  'debug("sdwriter:write_buffer: ", udec(byte_counter))

  if byte_counter >= FLUSH_AFTER_BYTES
    fat.flushData()
    byte_counter := 0

pri write_line(): result | mux, value, pos, err
  fetch(@write_entry)
  'DEBUG("sdwriter::write_line")
  mux := write_entry[1] >> 24
  line_buffer[0] := "D"
  line_buffer[1] := ":"
  pos := 2
  value := write_entry[0]
  pos += util.encode_hex_nibbles(@line_buffer + pos, value, 8)
  line_buffer[pos] := ":"
  pos += 1
  pos += util.encode_hex_byte(@line_buffer + pos, mux)
  line_buffer[pos] := ":"
  pos += 1
  value := write_entry[1] & $ffffff
  pos += util.encode_hex_nibbles(@line_buffer + pos, value, 6)
  line_buffer[pos] := 10
  'line_buffer[pos + 1] := 10
  pos += 1
  line_buffer[pos] := 0
  err := fat.writeData(@line_buffer, pos)
  if err <> pos
    set_sd_state(status.SD_ERROR)
  return pos

pri write_statistics_line(): result | pos
  ' write statistics line
  pos := 0
  line_buffer[0] := "S"
  line_buffer[1] := ":"
  pos := 2

  pos += util.encode_hex_nibbles(@line_buffer + pos, total_samples, 8)
  line_buffer[pos] := ":"
  pos += 1
  pos += util.encode_hex_nibbles(@line_buffer + pos, avg_timediff, 8)
  line_buffer[pos] := ":"
  pos += 1
  pos += util.encode_hex_nibbles(@line_buffer + pos, max_timediff, 8)
  line_buffer[pos] := ":"
  pos += 1
  pos += util.encode_hex_nibbles(@line_buffer + pos, max_sample, 8)

  line_buffer[pos] := 10 ' nl
  pos += 1
  fat.writeData(@line_buffer, pos)
  return pos

pri find_last_file_index() : result | name, h
  result := 0
  repeat
    fat.listEntries("N")
    name := fat.listName()
    if strsize(name) == 0
      quit
    if strsize(name) == 12 and util.startswith(string("RQADS"), name) and !util.endswith(string("~1.DAT"), name)
      h := util.decode_hex_nibbles(name + 5, 3)
      debug("found RQADSXXX.DAT", zstr(name), udec(fat.listSize()))
      result #>= h
  result &= $fff
