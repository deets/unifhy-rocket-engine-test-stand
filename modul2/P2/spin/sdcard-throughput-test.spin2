con
  _clkfreq = 300_000_000

  DEBUG_BAUD  = 2_000_000

  BUFFER_SIZE = 131072

var
  BYTE buffer[BUFFER_SIZE]
  BYTE read_block_buffer[512]
  BYTE verify
  LONG actual_buffer_size

  BYTE arg1[command.INPUT_BUFFER_SIZE]
  BYTE arg2[command.INPUT_BUFFER_SIZE]

obj
  sd: "deets_sd_spi"
  util: "util"
  serial: "jm_fullduplexserial"
  conf: "configuration"
  command: "command"

pub main(): result | td, max_td, cmd
  verify := 0
  actual_buffer_size := BUFFER_SIZE / 512
  serial.start(conf.RX0, conf.TX0, %0000, conf.BR_SERIAL)
  banner()
  sd.start_explicit(conf.SD_DO, conf.SD_CLK, conf.SD_DI, conf.SD_CS, conf.SD_SPI_SPEED)
  result := sd.mount_card()
  if result <> 2
    serial.fstr1(string("Unknown card: %d - can't mount!\r\n"), result)
    repeat
  mainloop()


pri mainloop() | cmd
  repeat
    command.reset_input_buffer()
    cmd := prompt(verify ? "V" : "-")
    case cmd
      0 :
      "v": toggle_verify()
      "d": dump()
      "h": help()
      "f": fill()
      "i": info()
      "b": set_actual_buffer_size()
      "w": write_test(1)
      "W": write_test(0)
      other: unknown(cmd)


pri help()
  serial.fstr0(@"Command help:\r\n")
  serial.fstr0(@"\r\n")
  serial.fstr0(@"h          - This message.\r\n")
  serial.fstr0(@"d <number> - Dump contents of block/sector <number>.\r\n")
  serial.fstr0(@"             If <number> is X, dump our write buffer.\r\n")
  serial.fstr0(@"d <number> - Dump contents of block/sector <number>.\r\n")
  serial.fstr0(@"f <text>   - Fill the 64KB write buffer with this fragment.\r\n")
  serial.fstr0(@"             Repeat until full.\r\n")
  serial.fstr0(@"i          - Display info about current settings.\r\n")
  serial.fstr0(@"v          - Verify mode (read back after write) on.\r\n")
  serial.fstr0(@"b <blocks> - Set actual buffer size in blocks.\r\n")
  serial.fstr0(@"w <s> <l>  - Write test, single block. Arguments see below.\r\n")
  serial.fstr0(@"W <s> <l>  - Write test, multiple block. Arguments see below.\r\n")
  nl()
  serial.fstr0(@"             Both tests write the write buffer from block <s>.\r\n")
  serial.fstr0(@"             for <l> blocks.\r\n")
  serial.fstr0(@"             They print out the MBit/seconds this took.\r\n")
  serial.fstr0(@"             If verify mode (V>-prompt) is on, the data is.\r\n")
  serial.fstr0(@"             read back and verified against the write buffer.\r\n")


pri info()
    serial.fstr1(@"Verify mode: %s\r\n", verify == 1 ? @"ON" : @"OFF")
    serial.fstr2(@"Actual buffer size: %d blocks, %d bytes\r\n", actual_buffer_size, actual_buffer_size * 512)


pri set_actual_buffer_size()
  if not command.number_of_args() == 1
    serial.fstr0(@"Set buffer size takes one arguments, <blocks>\r\n")
    return
  command.get_arg(@arg1)
  actual_buffer_size := util.toint(@arg1) <# (BUFFER_SIZE / 512)
  info()


pri write_test(single_block) | start, length, buffer_pos, ts, elapsed, usdiv, ms, to_write, verify_start
  if not command.number_of_args() == 2
    serial.fstr0(@"write test takes two arguments, <s> and <l>\r\n")
    return
  command.get_arg(@arg1)
  start := util.toint(@arg1)
  verify_start := start
  command.get_arg(@arg1)
  length := util.toint(@arg1)
  serial.fstr3(@"Writing %s from block %d, length: %d\r\n", single_block ? @"single" : @"multiple", start, length)
  buffer_pos := 0
  elapsed := 0
  usdiv := clkfreq / 1_000_000

  if single_block
    repeat length
      ts := cnt()
      sd.write_block(start++, @buffer + buffer_pos)
      elapsed += util.timediff(ts, cnt()) / usdiv
      buffer_pos := (buffer_pos + 512) +// (actual_buffer_size * 512)
  else
    to_write := length
    repeat until to_write == 0
      if to_write >= actual_buffer_size
        ts := cnt()
        sd.write_blocks(start, @buffer, actual_buffer_size)
        elapsed += util.timediff(ts, cnt()) / usdiv
        start += actual_buffer_size
        to_write -= actual_buffer_size
      else
        ts := cnt()
        sd.write_blocks(start, @buffer, to_write)
        elapsed += util.timediff(ts, cnt()) / usdiv
        to_write := 0

  ms := elapsed / 1000
  serial.fstr3(@"Wrote %d bytes in %dus, %dms\r\n", length * 512, elapsed, ms)
  if verify
    verify_blockdata(verify_start, length)


pri verify_blockdata(start, length) | buffer_offset, differ, offset
  buffer_offset := 0
  repeat length
    read_block(start++)
    differ, offset := block_and_buffer_differ(@buffer + buffer_offset)
    if differ == 1
      serial.fstr2(@"Verification failed at %d, buffer_offset: %d\r\n", --start, buffer_offset + offset)
      return
    buffer_offset := (buffer_offset + 512) +// (actual_buffer_size * 512)


pri block_and_buffer_differ(buffer_address): result | i
  repeat i from 0 to 511
    if BYTE[buffer_address][i] <> read_block_buffer[i]
      return 1, i
  return 0, 0


pri fill() | offset, size
  if not command.number_of_args() == 1
    serial.fstr0(@"fill takes one argument, <pattern>\r\n")
    return

  offset := 0
  if command.get_arg(@arg1) > 0
    size := strsize(@arg1)
    repeat
      repeat size
        buffer[offset] := arg1[offset +// size]
        ++offset
        if offset == BUFFER_SIZE
          quit
      if offset == BUFFER_SIZE
        quit


pri dump() | err, block_number, nargs, count
  nargs := command.number_of_args()
  if nargs < 1 or nargs > 2
    serial.fstr0(@"dump takes arguments, <blocknumber> [<count>]\r\n")
    return
  ' we do have a block number!
  command.get_arg(@arg1)
  if nargs == 2
    command.get_arg(@arg2)
    count := util.toint(@arg2)
  else
    count := actual_buffer_size
  if util.uppercase(arg1[0]) == "X"
    repeat block_number from 0 to count - 1
      util.dump_block(@buffer + block_number * 512, @serial.tx, @serial.fhex)
  else
    block_number := util.toint(@arg1)
    if nargs == 1
      count := 1
    serial.fstr1(@"dumping block %d\r\n", block_number)
    repeat count
      read_block(block_number++)
      util.dump_block(@read_block_buffer, @serial.tx, @serial.fhex)


pri write_block(): td | earlier, later
    serial.fstr0(string("write_block\r\n"))
    bytefill(@buffer, 123, BUFFER_SIZE)
    toggle_debug()
    earlier := getct()
    sd.write_block(1234, @buffer)
    later := getct()
    td := util.timediff(earlier, later)
    return td


pri write_blocks(): td | earlier, later
    serial.fstr0(string("write_blocks\r\n"))
    bytefill(@buffer, 123, 512)
    bytefill(@buffer + 512, $aa, 512)
    toggle_debug()
    earlier := getct()
    sd.write_blocks(4567, @buffer, 2)
    later := getct()
    td := util.timediff(earlier, later)
    return td


pri read_block(number): td | earlier, later
    sd.read_block(number, @read_block_buffer)


pri toggle_debug()
    pinlow(conf.DEBUG_PIN)
    waitms(10)
    pinhigh(conf.DEBUG_PIN)
    waitms(10)
    pinlow(conf.DEBUG_PIN)


pri nl()
  serial.tx(13)
  serial.tx(10)


pri toggle_verify()
  verify := not verify


pri prompt(mode) : result
  ' Will fill the input_buffer with characters
  ' until <return> is pressed. Will place a trailing
  ' 0 into the buffer.
  ' Returns the first character for quick command
  ' dispatch.
  '
  ' ATTENTION: just wraps around if you type more than
  ' INPUT_BUFFER_SIZE!
  serial.tx(mode)
  serial.tx(">")
  serial.tx(" ")
  return command.read_input(@serial.rxcheck, @serial.tx)

pri unknown(cmd)
  serial.fstr0(@"unknown command\r\n")


pri error()
  serial.fstr0(@"error\r\n")


pri banner()
  serial.fstr0(@"#######################################################\r\n#                                                     #\r\n# SD Card Throughput Test - (C) 2022 Diez B. Roggisch #\r\n#                                                     #\r\n#   Press h <enter> for help                          #\r\n#                                                     #\r\n#######################################################\r\n")
  nl()
