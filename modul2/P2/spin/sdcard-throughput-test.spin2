con
  _clkfreq = 300_000_000

  DEBUG_BAUD  = 2_000_000

  BUFFER_SIZE = 65536
var
  BYTE buffer[BUFFER_SIZE]

obj
  sd: "deets_sd_spi"
  util: "util"
  serial: "jm_fullduplexserial"
  conf: "configuration"

pub main(): result | td, max_td, cmd
  serial.start(conf.RX0, conf.TX0, %0000, conf.BR_SERIAL)
  serial.fstr0(string("begin\r\n"))
  result := sd.start_explicit(conf.SD_DO, conf.SD_CLK, conf.SD_DI, conf.SD_CS, conf.SD_SPI_SPEED)

  serial.fstr1(string("start_explicit: %d\r\n"), result)
  result := sd.mount_card()
  if result <> 2
    serial.fstr1(string("unknown card: %d\r\n"), result)
    repeat

  serial.fstr1(string("mountCard: %d\r\n"), result)
  max_td := 0
  repeat
    repeat until serial.available() <> 0
    cmd := serial.rx()
    case cmd
      "w": td := write_block()
      "r": td := read_block()
      "W": td := write_blocks()
    '   '"R": td := read_blocks()
    max_td #>= td
    serial.fstr2(string("td: %d, max_td: %d\r\n"), td, max_td)

  sd.release()

pri write_block(): td | earlier, later
    serial.fstr0(string("write_block\r\n"))
    bytefill(@buffer, 123, BUFFER_SIZE)
    toggle_debug()
    earlier := getct()
    sd.write_block(1234, @buffer)
    later := getct()
    td := util.timediff(earlier, later)
    return td

pri write_blocks(): td | earlier, later
    serial.fstr0(string("write_blocks\r\n"))
    bytefill(@buffer, 123, 512)
    bytefill(@buffer + 512, $aa, 512)
    toggle_debug()
    earlier := getct()
    sd.write_blocks(4567, @buffer, 2)
    later := getct()
    td := util.timediff(earlier, later)
    return td

pri read_block(): td | earlier, later
    serial.fstr0(string("read_block\r\n"))
    toggle_debug()
    earlier := getct()
    sd.read_block(1234, @buffer)
    later := getct()
    td := util.timediff(earlier, later)
    return td

pri toggle_debug()
    pinlow(conf.DEBUG_PIN)
    waitms(10)
    pinhigh(conf.DEBUG_PIN)
    waitms(10)
    pinlow(conf.DEBUG_PIN)

' pri read_blocks(): td
'     serial.fstr0(string("read_blocks"))
'     earlier := getct()
'     sd.read_blocks(1234, @buffer)
'     later := getct()
'     td := util.timediff(earlier, later)
'     return td


pri dump_block() | offset
  offset := 0
  repeat 32
    repeat 16
      serial.fhex(@buffer + offset, 2)
      offset += 1
    nl()

pri nl()
  serial.tx(13)
  serial.tx(10)
