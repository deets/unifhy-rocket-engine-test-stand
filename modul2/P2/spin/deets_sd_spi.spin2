CON 'See end of file for license
{{   SDSPI driver for P2
    2022, Diez Roggisch, deets@web.de

    Originally by Cheezus Slice - Joe Heinz - 2019
    Cheezus Slice (Joe Heinz)  -   July - 2019
    Original spin version by Radical Eye Software Copyright 2008
}}
    sectorsize =   512
    ' on the P2 eval board, 15_000_000 was the
    ' maximum speed I could achieve
    spi_clk_max =   15_000_000
    spi_clk_inv =   1           ' 1 inverted, 0 non-inverted

'RJA added multiblock reads and removed smartpin mode to boost speed
'RJA also allows specifying cog # in con section below

CON
  GO_IDLE_STATE = 0
  APP_CMD = 55
  APP_SEND_OP_COND = 41
  APP_SET_WR_BLOCK_ERASE_COUNT = 23
  READ_OCR = 58
  SEND_IF_COND = 8
  SET_BLOCKLEN = 16
  CMD_WRITE_BLOCK = 24
  CMD_WRITE_MULTIPLE_BLOCK = 25

  OCR_CCS_BIT = 30

  SINGLE_BLOCK_TOKEN = $FE
  MULTI_BLOCK_TOKEN = $FC
  STOP_TRAN_TOKEN = $FD

VAR
  byte cog

PUB Stop()
    if cog
        cogstop(cog-1)
    cog := 0

PUB start_explicit( _DO, _CLK, _DI, _CS ) : card_type | domask, dimask
    stop()
    cmd := "i"   'set flag to know if the started cog has read its parameters
    arg1 :=  _DO | (_CLK << 8) + (_DI << 16) + ( _CS << 24)' pins
    arg2 := getmask(_CLK, _DO) + (getmask(_CLK, _DI) << 4) ' clock masks
    arg2 += spi_clk_inv << 8                               ' clock invert
    arg3 := compute_bit_time(spi_clk_max)                  ' spi bit time
    err := clkfreq
    cog := coginit(COGEXEC_NEW, @_asm_start, @cmd) + 1 'RJA
    if cog
        repeat until cmd <> "i"     ' wait until cog is done reading parameter
        card_type := err            ' arg5 returns card type or returns with error from low level driver

PUB mount_card():r
   return do_command("c", 0, 0, 0)

PUB read_block(n, b):r 'n is block#, b is pointer to write to
    return do_command("r", n, b, 0)

PUB write_block(n, b):r 'n is block#, b is pointer to read from
    return do_command("w", n, b, 0)

PUB write_blocks(n, buffer, count):r 'n is block#, b is pointer to read from, c is number of blocks
    return do_command("W", n, buffer, count)

PUB release():r
    return do_command("z",0,0,0)

PUB get_cog():r
    return cog

PUB get_mailbox():r
    return @cmd


pub readblocks(n,b,p):r  'use multi-block read n=#blocks to read, b=block#, p=pointer to write to'Note:  Currently have to re-mount after using this...
    return do_command("F", n, b, p)   'note:  usage of "n" and "b" is not the same as above...

PRI compute_bit_time(max_clkfreq) : bt
    bt :=((clkfreq / max_clkfreq) / 2 ) + 1   ' SPI bit time
    if bt < 2                              ' make sure at least sysclock /2
        bt := 2

PRI do_command_async(_cmd, _arg1, _arg2, _arg3)
    repeat while cmd <> 0
    arg1 := _arg1
    arg2 := _arg2
    arg3 := _arg3
    cmd  := _cmd

PRI do_command(_cmd, _arg1, _arg2, _arg3):r
    do_command_async(_cmd, _arg1, _arg2, _arg3)
    repeat until cmd == 0
    return err

PRI getmask(clk, data) : t
    t := (clk - data) & %0111

DAT
                org
_asm_start      mov     ptr_to_mbox,    ptra                ' save mbox address for later

get_cmd
                '' get parameters from spin
                rdlong cmd_in, ptra wz '
                '' timeout and release card after 10s
        if_z    jmp     #get_cmd                            ' no cmd so handle time
                rdlong  arg1_in,        ++ptra
                rdlong  arg2_in,        ++ptra
                rdlong  arg3_in,        ++ptra
                rdlong  err_out,        ++ptra              ' dummy read to align err pointer
                '' decode command
                cmp     cmd_in,         #"r"    wz
        if_z    jmp     #read_a
                cmp     cmd_in,         #"w"    wz
        if_z    jmp     #write_b
                cmp     cmd_in,         #"W"    wz
        if_z    jmp     #write_multi
                cmp     cmd_in,         #"F"    wz
        if_z    jmp     #read_multi
                cmp     cmd_in,         #"i"    wz
        if_z    jmp     #do_init
                cmp     cmd_in,         #"c"    wz
        if_z    call    #card_init
                cmp     cmd_in,         #"z"    wz
        if_z    jmp     #card_release
                mov     err_out,        #5                  ' err = no command                 '




DAT 'end_cmd               '' do commands
end_cmd
                test    rq_done,#511    wz
        if_nz   altd    rq_done
        if_nz   mov     0-0,#0
        if_nz   mov     rq_done,#0
        if_z    wrlong  err_out,        ptra
                mov     cmd_in,         #0                  ' signal done to spin driver
                mov     ptra,           ptr_to_mbox         ' return ptra back to mbox
        if_z    wrlong  cmd_in,         ptr_to_mbox
                jmp     #get_cmd

dat 'do_init     'RJA disabled smartpins
do_init

                getbyte pinDO,          arg1_in,    #0
                getbyte pinCLK,         arg1_in,    #1
                getbyte pinDI,          arg1_in,    #2
                getbyte pinCS,          arg1_in,    #3
                mov     bit_wait,       arg3_in
                mov delay1s, err_out ' clkfreq!
                jmp     #end_cmd


DAT 'read_multi 'read multiple blocks (AKA sectors)
read_multi          '' arg1 is #blocks to read, arg2 is block#, arg3 is hub pointer
                mov     cmdout,         #18                 ' command = block read
                shl     arg2_in,        blocksh             ' non-hc compatibility
                mov     cmdpar,         arg2_in             ' sd block address
                getct   timeout                             ' setup 1s timeout
                addct1  timeout,        delay1s             ' in case card does not respond
                call    #do_sdcmd

                wrfast  #0,arg3_in
LoopMulti
                'read_resp
                'waitx   ##200
                call    #read_d
                cmp     x, #$FF wcz
        if_e    jmp     #LoopMulti

                mov     spare, ##sectorsize
.loop
                rep     @.end_read, #8
                drvl    pinCLK
                rcl     x,#1  ' shift in msb first (first dummy zero)
                waitx   #2
                drvh    pinCLK
                nop
                testp   pinDO  wc
.end_read
                rcl     x,#1
                wfbyte  x
                djnz    spare,#.loop

                call    #read_d
                call    #read_d

                djnz    arg1_in,#LoopMulti

                'Do commmand 12
                drvh    pinCS
                waitx   #100
                mov     cmdout,         #12                 ' command = block read
                shr     arg2_in,        blocksh             ' non-hc compatibility
                mov     cmdpar,         #0
                getct   timeout                             ' setup 1s timeout
                addct1  timeout,        delay1s             ' in case card does not respond
                call    #do_sdcmd


                jmp     #end_cmd

DAT 'read_f 'read byte direct
read_d
                mov     x,          #0
                rep     @.end_read, #8
                drvl    pinCLK
                waitx   #14    '' !! 13 safe for up to 160 mhz, 14 for 320mhz
                testp   pinDO  wc
                drvh    pinCLK
                waitx   #14
                rcl     x, #1
.end_read
                ret

DAT 'read_a 'read a block (sector)
read_a          '' arg1 is sd ptr, arg2 is hub
                mov     cmdout,         #17                 ' command = block read
                shl     arg1_in,        blocksh             ' non-hc compatibility
                mov     cmdpar,         arg1_in             ' sd block address
                getct   timeout                             ' setup 1s timeout
                addct1  timeout,        delay1s             ' in case card does not respond
                call    #do_sdcmd
                call    #read_resp
                wrfast  #0,             arg2_in

'RJA making this faster...

                mov     spare, ##sectorsize
.loop
                rep     @.end_read, #8
                drvl    pinCLK
                rcl     x,#1  ' shift in msb first (first dummy zero)
                waitx   #5
                drvh    pinCLK
                nop
                testp   pinDO  wc
.end_read
                rcl     x,#1
                wfbyte  x
        djnz    spare,#.loop

                call    #read_d
                call    #read_d
                ' FIFO should have emptied itself now
                jmp     #end_cmd



dat ' write_b        'write a sector
write_b         '' arg1 is sd ptr, arg2 is hub


                mov     cmdout,         #CMD_WRITE_BLOCK
                shl     arg1_in,        blocksh             ' non-hc compatibility
                mov     cmdpar,         arg1_in             ' sd block address
                getct   timeout                             ' setup 1s timeout
                addct1  timeout,        delay1s             ' in case card does not respond
                call    #do_sdcmd
                mov     dataout,        #SINGLE_BLOCK_TOKEN
                call    #send_byte
                rdfast  #0,             arg2_in

                mov     spare,          ##sectorsize
.loop           rfbyte  dataout
                call    #send_byte
                djnz    spare,          #.loop
                call    #read_byte
                call    #read_byte
                call    #read_resp
                and     reply,          #$1f
                cmp     reply,          #5              wz
    if_nz       mov     err_out,        ##-42               ' err = bwrite timeout
                call    #sd_busy
                drvh    pinCS    ' set cs high
                jmp     #end_cmd


dat ' write_multi
write_multi         '' arg1 is block address, arg2 is hub address, arg3 block count
                ' mov     cmdout,         #APP_CMD
                ' mov     cmdpar,         #0
                ' call    #do_sdcmd
                ' mov     cmdout,         #APP_SET_WR_BLOCK_ERASE_COUNT
                ' mov     cmdpar,         arg3_in
                ' call    #do_sdcmd

                mov     cmdout,         #CMD_WRITE_MULTIPLE_BLOCK
                shl     arg1_in,        blocksh             ' non-hc compatibility
                mov     cmdpar,         arg1_in             ' sd block address
                getct   timeout                             ' setup 1s timeout
                addct1  timeout,        delay1s             ' in case card does not respond
                call    #do_sdcmd

                ' prepare fifo for reading our data
                rdfast  #0,             arg2_in

.block_loop
                mov     dataout,        #MULTI_BLOCK_TOKEN
                call    #send_byte
                mov     spare,          ##sectorsize
.loop           rfbyte  dataout
                call    #send_byte
                djnz    spare,          #.loop
                ' always three bytes, two CRC and the last one
                ' is "data response' in elm-chan.org
                call    #read_byte
                call    #read_byte
                call    #read_resp
                and     reply,          #$1f
                cmp     reply,          #5              wz
    if_nz       jmp     #.error_write_multi
                call    #sd_busy
                djnz    arg3_in, #.block_loop
                ' this is subtle: after the STOP_TRAN_TOKEN we
                ' need to pump out one more byte before waiting for busy
                ' to end. This is in the graphic in the "Multiple Block Write"
                ' section on elm-chan.org, and in the ESP32 driver.
                mov     dataout, #STOP_TRAN_TOKEN
                call    #send_byte
                mov     dataout, #$ff
                call    #send_byte

                call    #sd_busy
                drvh    pinCS    ' set cs high
                mov     err_out, arg3_in ' we return the number of written blocks
                jmp     #end_cmd

.error_write_multi
                mov     err_out,        ##-42               ' err = bwrite timeout
                call    #sd_busy
                drvh    pinCS    ' set cs high
                jmp     #end_cmd

dat ' card_init
card_init

                drvh    pinCS
                drvh    pinCLK
                drvh    pinDI


                mov     x,##600
.loop1
                call    #read_byte
                waitx   #100
                djnz    x,#.loop1

                mov     x,#3
.idleLoop
                mov     cmdout,         #GO_IDLE_STATE
                mov     cmdpar,         #0
                getct   timeout                             ' setup 1s timeout
                addct1  timeout,        delay1s             ' in case card does not respond
                call    #do_sdcmd
                drvh    pinCS
                waitx   #100
                djnz    x,#.idleLoop


                mov     cmdout,         #SEND_IF_COND
                mov     cmdpar,         #$1AA  ' this is just by the spec
                call    #do_sdcmd
                call    #read_r3_r7
                drvh    pinCS
                ' Check that we are conforming to spec
                bitl    err_out, #16 + (16 << 4)
                cmp     err_out, #$1AA              wz
      if_nz     mov     err_out, ##-1
      if_nz     jmp     #end_cmd
' Run this loop until the card replies that it is initialized
' TODO: according to http://elm-chan.org/docs/mmc/mmc_e.html, CMD1 should be used if rejected
.initLoop       mov     err_out,        ##-40               ' err = card won't init


                mov     cmdout,         #APP_CMD
                mov     cmdpar,         #0
                call    #do_sdcmd
                mov     cmdout,         #APP_SEND_OP_COND
                mov     cmdpar,         ##$4000_0000        '
                call    #do_sdcmd
                drvh    pinCS                               ' set cs high
                cmp     reply,          #$01        wz      ' 01 = idle

        if_z    jmp     #.initLoop


' operating voltage range,
                mov     cmdout,         #READ_OCR
                mov     cmdpar,         #0
                call    #do_sdcmd
                call    #read_r3_r7
                drvh    pinCS    ' set cs high
                ' check the card capacity status bit
                ' to determine if we work block-based
                testb   err_out,        #OCR_CCS_BIT          wz
        if_nz   mov     blocksh,        #9                  ' sd support
        if_nz   mov     err_out,        #1                  ' sd support, return card type 1


        if_z    mov     blocksh,        #0                  ' sdhc
        if_z    mov     err_out,        #2                  ' return card type 2

                mov     cmdout,         #SET_BLOCKLEN
                mov     cmdpar,         ##sectorsize
                call    #do_sdcmd
                drvh    pinCS    ' set cs high


                jmp #end_cmd

read_r3_r7
                call    #read_byte                          ' read the 32 bit of the R3/R7 result
                mov     err_out, reply
                call    #read_byte
                shl     err_out,#8
                add     err_out,reply
                call    #read_byte
                shl     err_out,#8
                add     err_out,reply
                call    #read_byte
                shl     err_out,#8
                add     err_out,reply
read_r3_r7_ret  ret

dat 'card_release
card_release
              fltl pinCS
              call #read_byte
              call #read_byte
              fltl pinCS
              fltl pinCLK
              fltl pinDI

              jmp #end_cmd

dat 'do_sdcmd
do_sdcmd   '' OP is cmdout, parm = cmdpar
                drvl    pinCS
                call    #read_byte
                mov     dataout,        cmdout
                add     dataout,        #$40
                call    #send_byte
                getbyte dataout,        cmdpar,     #3
                call    #send_byte
                getbyte dataout,        cmdpar,     #2
                call    #send_byte
                getbyte dataout,        cmdpar,     #1
                call    #send_byte
                getbyte dataout,        cmdpar,     #0
                call    #send_byte
                cmp     cmdout,         #0              wz
    if_z        mov     dataout,        #$95
    if_nz       mov     dataout,        #$87
                call    #send_byte
                call    #read_resp
do_sdcmd_ret    ret

dat 'send_byte
send_byte
                rol     dataout,       #24
                rep     @.end_send, #8
                rcl     dataout,       #1      wc
                drvl    pinCLK
                drvc    pinDI
                waitx   bit_wait
                drvh    pinCLK
                waitx   bit_wait
.end_send
        _ret_   drvh    pinDI

dat 'read_byte
read_byte
                mov     reply,#0
                rep     @.end_read, #8
                drvl    pinCLK
                waitx   bit_wait
                testp   pinDO  wc
                drvh    pinCLK
                waitx   bit_wait
                rcl     reply, #1
.end_read
                ret


dat 'sd_busy
sd_busy         call    #read_byte
                cmp     reply,          #0          wz
   if_z         call    #check_time
   if_z         jmp     #sd_busy
sd_busy_ret     ret

DAT 'read_resp
read_resp       call    #read_byte
                cmp     reply,          #$ff        wz
   'if_z         call    #check_time
   if_z         jmp     #read_resp
read_resp_ret   ret

dat 'sd_busy
check_time      pollct1                             wc
   if_nc        ret
                mov     err_out,        ##-41               ' err = timeout
                pop     spare ' pop a stack level
                jmp     #end_cmd


DAT 'reserved and assigned data
x           long    0 'for RJA
rq_done long 0 ' cog location to clear

' loaded on init   ''15 longs CHZ code
{=== Pin Variables ===}
pinDO       res 1       ' do
pinCLK      res 1       ' clk
pinDI       res 1       ' di
pinCS       res 1       ' chip select

{===== Command Mailbox =====}
ptr_to_mbox res 1       ' pointer to spin mailbox
cmd_in      res 1       ' mailbox in
arg1_in     res 1
arg2_in     res 1
arg3_in     res 1
err_out     res 1
{=== Timing Variables ===}
delay1s     res 1
bit_wait    res 1

'FIT $1C0
                   ''============[ COG VARIABLES - SD BOOT ROM A]========================================
    'org    $1C0              ' place the variables in cog $1C0-$1DF

cmdout          res     1                       ' The 8b CMDxx | $40
cmdpar          res     1                       ' The 32b parameters
cmdcrc          res     1                       ' The 8b CRC (must be valid for CMD0 & CMD8)
cmdpar2         res     1                       ' SDV1=$0, SDV2=$40000000
cmdtype         res     1                       ' reply is R1=1, R3=3, R7=7, else 0
reply           res     1                       ' R1 reply (moved to replyR1 when R3/R7 32b reply here)
replyR1         res     1                       ' R1 reply (8b saved when R3/R7 32b reply follows)
dataout         res     1                       ' 8/32 bit data being shifted out
bytescnt        res     1                       ' #bytes to send/recv
bitscnt         res     1                       ' #bits to be shifted in/out
ctr1            res     1
timeout         res     1                       ' = starttime + delay
spare           res     1
skiprun         res     1                       ' 1= skip load/run mbr/vol & load/no-run fname
                                                                   '\ 1=SDV1, 2=SDV2(byte address), 3=SDHC/SDV2(block address)
blocksh         res     1                       '/ block shift 0/9 bits
clustersh       res     1                       ' sectors/cluster SHL 'n' bits

vol_begin       res     1 '$0000_2000           ' Ptn0: first sector of PTN
fsi_begin       res     1 '$0000_2001           ' Ptn0:       sector of file system info
fat_begin       res     1 '$0000_3122           ' Ptn0: first sector of FAT table
dir_begin       res     1' $0000_4000           ' Ptn0: first sector of DATA is DIR table
dat_begin       res     1 '$0000_4580 $0000_54C0' Ptn0: first sector of file's DATA
ptn_size        res     1 '$0008_0000           '       file-size 32KB = 64<<9 sectors

_bufad          res     1
_blocknr        res     1
_sectors        res     1
_entries        res     1
bufad           res     1                       ' ptr sector buffer
blocknr         res     1                       ' sector#
fname           res     3                       ' 8+3+1
_hubdata        res     1

FIT 496


dat         '' singleton spin mailbox
orgh
alignl
cmd     long 0
arg1    long 0
arg2    long 0
arg3    long 0
err     long 0

CON 'MIT License Terms
{{
'  Permission is hereby granted, free of charge, to any person obtaining
'  a copy of this software and associated documentation files
'  (the "Software"), to deal in the Software without restriction,
'  including without limitation the rights to use, copy, modify, merge,
'  publish, distribute, sublicense, and/or sell copies of the Software,
'  and to permit persons to whom the Software is furnished to do so,
'  subject to the following conditions:
'
'  The above copyright notice and this permission notice shall be included
'  in all copies or substantial portions of the Software.
'
'  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
'  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
'  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
'  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
'  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
'  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
'  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}