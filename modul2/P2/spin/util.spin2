pub decode_nibble(c) : result
  result := c - $30 ' convert from ascii into 0..9
  if result > 9 ' we assume A-F
    result &= %1011111 ' enforce upper case ASCII
    result -= 7

pub encode_nibble(c) : result
  result := c + $30 ' convert to ascii 0..9
  if c > 9 ' we are in A-F territory
    result += 7

pub decode_hex_byte(address) : result
  result := decode_nibble(BYTE[address]) << 4
  result |= decode_nibble(BYTE[address + 1])

pub compute_checksum(start, stop) : result | i
  result := 0
  repeat i from start to stop
    result ^= BYTE[i]
  return result

pub encode_hex_long(address, value): result
  return encode_hex_nibbles(address, value, 8)

pub encode_hex_byte(address, value): result
  return encode_hex_nibbles(address, value, 2)

pub encode_hex_nibbles(address, value, count): result | shift, h, i
  shift := (count - 1) * 4
  repeat i from 0 to count - 1
    h := (value >> shift) & $f
    BYTE[address + i] := encode_nibble(h)
    shift -= 4
  return count

pub decode_hex_nibbles(address, count): result | i
  result := 0
  repeat i from 0 to count - 1
    result <<= 4
    result |= decode_nibble(BYTE[address + i])
  return result

pub startswith(prefix, s) : result | i, size
  size := strsize(prefix)
  result := TRUE
  repeat i from 0 to size - 1
    result &= BYTE[prefix][i] == BYTE[s][i]

pub endswith(suffix, s) : result | offset
  result := FALSE
  offset := strsize(s) - strsize(suffix)
  if offset > 0
    return startswith(suffix, s + offset)

pub timediff(earlier, later): result
  result := later - earlier
  if result +> 2147483648
    result := $ffffffff - result + 1

pub isalpha(c) : result
  return c >= "A" and c <= "z"

pub isnumeric(c): result
  return c >= "0" and c <= "9"

pub strupper(s) | i, c
  ' changes all characters to upper case
  ' assumes 0 as termination!
  i := 0
  repeat
    c := BYTE[s][i]
    if c == 0
      quit
    BYTE[s][i++] := uppercase(c)

pub uppercase(c) : result
  if isalpha(c)
      return c & %11011111
  return c

pub toint(buf): result | i, c
  i := 0
  result := 0

  c := BYTE[buf][i++]
  repeat until c == 0
    result *= 10
    if isnumeric(c)
      result += c - "0"
    else
      quit
    c := BYTE[buf][i++]

  return result

pub dump_block(buf, serial_tx, serial_fhex) | offset, copy, c
  offset := 0
  repeat 32
    copy := offset
    repeat 16
      serial_fhex(BYTE[buf][offset++], 2)
    serial_tx(" ")
    repeat 16
      c := BYTE[buf][copy++]
      if isalpha(c) or isnumeric(c)
        serial_tx(c)
      else
        serial_tx(".")
    serial_tx(13)
    serial_tx(10)
  serial_tx(13)
  serial_tx(10)
